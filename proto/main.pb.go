// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/main.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/main.proto

It has these top-level messages:
	CommonRequest
	KeywordRequest
	GetSamplesReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *CommonRequest) Reset()                    { *m = CommonRequest{} }
func (m *CommonRequest) String() string            { return proto1.CompactTextString(m) }
func (*CommonRequest) ProtoMessage()               {}
func (*CommonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommonRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CommonRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type KeywordRequest struct {
	Keyword   string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *KeywordRequest) Reset()                    { *m = KeywordRequest{} }
func (m *KeywordRequest) String() string            { return proto1.CompactTextString(m) }
func (*KeywordRequest) ProtoMessage()               {}
func (*KeywordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KeywordRequest) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *KeywordRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type GetSamplesReply struct {
	Samples []*GetSamplesReply_Sample `protobuf:"bytes,1,rep,name=samples" json:"samples,omitempty"`
}

func (m *GetSamplesReply) Reset()                    { *m = GetSamplesReply{} }
func (m *GetSamplesReply) String() string            { return proto1.CompactTextString(m) }
func (*GetSamplesReply) ProtoMessage()               {}
func (*GetSamplesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetSamplesReply) GetSamples() []*GetSamplesReply_Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

type GetSamplesReply_Sample struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetSamplesReply_Sample) Reset()                    { *m = GetSamplesReply_Sample{} }
func (m *GetSamplesReply_Sample) String() string            { return proto1.CompactTextString(m) }
func (*GetSamplesReply_Sample) ProtoMessage()               {}
func (*GetSamplesReply_Sample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *GetSamplesReply_Sample) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto1.RegisterType((*CommonRequest)(nil), "proto.CommonRequest")
	proto1.RegisterType((*KeywordRequest)(nil), "proto.KeywordRequest")
	proto1.RegisterType((*GetSamplesReply)(nil), "proto.GetSamplesReply")
	proto1.RegisterType((*GetSamplesReply_Sample)(nil), "proto.GetSamplesReply.Sample")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GetSamples service

type GetSamplesClient interface {
	All(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*GetSamplesReply, error)
	AllByName(ctx context.Context, in *KeywordRequest, opts ...grpc.CallOption) (*GetSamplesReply, error)
}

type getSamplesClient struct {
	cc *grpc.ClientConn
}

func NewGetSamplesClient(cc *grpc.ClientConn) GetSamplesClient {
	return &getSamplesClient{cc}
}

func (c *getSamplesClient) All(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*GetSamplesReply, error) {
	out := new(GetSamplesReply)
	err := grpc.Invoke(ctx, "/proto.GetSamples/All", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getSamplesClient) AllByName(ctx context.Context, in *KeywordRequest, opts ...grpc.CallOption) (*GetSamplesReply, error) {
	out := new(GetSamplesReply)
	err := grpc.Invoke(ctx, "/proto.GetSamples/AllByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GetSamples service

type GetSamplesServer interface {
	All(context.Context, *CommonRequest) (*GetSamplesReply, error)
	AllByName(context.Context, *KeywordRequest) (*GetSamplesReply, error)
}

func RegisterGetSamplesServer(s *grpc.Server, srv GetSamplesServer) {
	s.RegisterService(&_GetSamples_serviceDesc, srv)
}

func _GetSamples_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetSamplesServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GetSamples/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetSamplesServer).All(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetSamples_AllByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetSamplesServer).AllByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GetSamples/AllByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetSamplesServer).AllByName(ctx, req.(*KeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetSamples_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GetSamples",
	HandlerType: (*GetSamplesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _GetSamples_All_Handler,
		},
		{
			MethodName: "AllByName",
			Handler:    _GetSamples_AllByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}

func init() { proto1.RegisterFile("proto/main.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xad, 0xd3, 0x8d, 0x3d, 0x71, 0x4a, 0x50, 0x29, 0x63, 0xc2, 0xe8, 0x69, 0xa7, 0x08,
	0x13, 0xf5, 0xe2, 0xa5, 0xdd, 0x61, 0x82, 0x28, 0x25, 0xfe, 0x05, 0x59, 0x7d, 0xcc, 0x62, 0xd2,
	0xc4, 0x24, 0x22, 0x3d, 0xfa, 0x9f, 0x4b, 0x93, 0x96, 0x31, 0x99, 0x78, 0xca, 0xfb, 0xbe, 0xf7,
	0xde, 0x2f, 0xc9, 0x07, 0xa7, 0xda, 0x28, 0xa7, 0xae, 0x24, 0x2f, 0x2b, 0xea, 0x4b, 0x72, 0xe8,
	0x8f, 0x24, 0x85, 0xe3, 0x85, 0x92, 0x52, 0x55, 0x0c, 0x3f, 0x3e, 0xd1, 0x3a, 0x42, 0xe0, 0xa0,
	0xe2, 0x12, 0xe3, 0x68, 0x1a, 0xcd, 0x86, 0xcc, 0xd7, 0x64, 0x02, 0x43, 0x57, 0x4a, 0xb4, 0x8e,
	0x4b, 0x1d, 0xef, 0xfb, 0xc6, 0xc6, 0x48, 0x1e, 0x60, 0xf4, 0x88, 0xf5, 0x97, 0x32, 0xaf, 0x1d,
	0x23, 0x86, 0xc1, 0x7b, 0x70, 0x5a, 0x4c, 0x27, 0xff, 0x21, 0xbd, 0xc1, 0xc9, 0x12, 0xdd, 0x0b,
	0x97, 0x5a, 0xa0, 0x65, 0xa8, 0x45, 0x4d, 0xee, 0x60, 0x60, 0x83, 0x8e, 0xa3, 0x69, 0x6f, 0x76,
	0x34, 0xbf, 0x0c, 0xef, 0xa7, 0xbf, 0x06, 0x69, 0x10, 0xac, 0x9b, 0x1e, 0x4f, 0xa0, 0x1f, 0xac,
	0x5d, 0x3f, 0x9a, 0x7f, 0x47, 0x00, 0x1b, 0x02, 0xb9, 0x81, 0x5e, 0x2a, 0x04, 0x39, 0x6b, 0xd9,
	0x5b, 0x89, 0x8c, 0x2f, 0x76, 0xdf, 0x98, 0xec, 0x91, 0x7b, 0x18, 0xa6, 0x42, 0x64, 0xf5, 0x73,
	0x13, 0xd2, 0x79, 0x3b, 0xb6, 0x9d, 0xc5, 0xdf, 0xdb, 0xd9, 0x2d, 0x24, 0x85, 0x92, 0x74, 0xad,
	0x56, 0xaa, 0x14, 0x68, 0xb4, 0xe0, 0x0e, 0x2d, 0x95, 0x65, 0x61, 0xd4, 0xda, 0xe8, 0x22, 0xec,
	0x65, 0xa3, 0xa7, 0xc6, 0x58, 0xb2, 0x7c, 0x91, 0x37, 0x3a, 0x8f, 0x56, 0x7d, 0xdf, 0xb8, 0xfe,
	0x09, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x6d, 0xbb, 0x48, 0xd4, 0x01, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/main.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/main.proto

It has these top-level messages:
	CommonRequest
	KeywordRequest
	GetSamplesReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *CommonRequest) Reset()                    { *m = CommonRequest{} }
func (m *CommonRequest) String() string            { return proto1.CompactTextString(m) }
func (*CommonRequest) ProtoMessage()               {}
func (*CommonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommonRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CommonRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type KeywordRequest struct {
	Keyword   string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *KeywordRequest) Reset()                    { *m = KeywordRequest{} }
func (m *KeywordRequest) String() string            { return proto1.CompactTextString(m) }
func (*KeywordRequest) ProtoMessage()               {}
func (*KeywordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *KeywordRequest) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *KeywordRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KeywordRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type GetSamplesReply struct {
	Samples []*GetSamplesReply_Sample `protobuf:"bytes,1,rep,name=samples" json:"samples,omitempty"`
}

func (m *GetSamplesReply) Reset()                    { *m = GetSamplesReply{} }
func (m *GetSamplesReply) String() string            { return proto1.CompactTextString(m) }
func (*GetSamplesReply) ProtoMessage()               {}
func (*GetSamplesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetSamplesReply) GetSamples() []*GetSamplesReply_Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

type GetSamplesReply_Sample struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetSamplesReply_Sample) Reset()                    { *m = GetSamplesReply_Sample{} }
func (m *GetSamplesReply_Sample) String() string            { return proto1.CompactTextString(m) }
func (*GetSamplesReply_Sample) ProtoMessage()               {}
func (*GetSamplesReply_Sample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *GetSamplesReply_Sample) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto1.RegisterType((*CommonRequest)(nil), "proto.CommonRequest")
	proto1.RegisterType((*KeywordRequest)(nil), "proto.KeywordRequest")
	proto1.RegisterType((*GetSamplesReply)(nil), "proto.GetSamplesReply")
	proto1.RegisterType((*GetSamplesReply_Sample)(nil), "proto.GetSamplesReply.Sample")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GetSamples service

type GetSamplesClient interface {
	// Unary
	All(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*GetSamplesReply, error)
	AllByName(ctx context.Context, in *KeywordRequest, opts ...grpc.CallOption) (*GetSamplesReply, error)
	// Server-side stream
	ServerStreamAll(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (GetSamples_ServerStreamAllClient, error)
	ServerStreamAllByName(ctx context.Context, in *KeywordRequest, opts ...grpc.CallOption) (GetSamples_ServerStreamAllByNameClient, error)
	// Client-side stream
	ClientStreamAll(ctx context.Context, opts ...grpc.CallOption) (GetSamples_ClientStreamAllClient, error)
	ClientStreamAllByName(ctx context.Context, opts ...grpc.CallOption) (GetSamples_ClientStreamAllByNameClient, error)
	// Bidirectional stream
	StreamAll(ctx context.Context, opts ...grpc.CallOption) (GetSamples_StreamAllClient, error)
	StreamAllByName(ctx context.Context, opts ...grpc.CallOption) (GetSamples_StreamAllByNameClient, error)
}

type getSamplesClient struct {
	cc *grpc.ClientConn
}

func NewGetSamplesClient(cc *grpc.ClientConn) GetSamplesClient {
	return &getSamplesClient{cc}
}

func (c *getSamplesClient) All(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*GetSamplesReply, error) {
	out := new(GetSamplesReply)
	err := grpc.Invoke(ctx, "/proto.GetSamples/All", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getSamplesClient) AllByName(ctx context.Context, in *KeywordRequest, opts ...grpc.CallOption) (*GetSamplesReply, error) {
	out := new(GetSamplesReply)
	err := grpc.Invoke(ctx, "/proto.GetSamples/AllByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getSamplesClient) ServerStreamAll(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (GetSamples_ServerStreamAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GetSamples_serviceDesc.Streams[0], c.cc, "/proto.GetSamples/ServerStreamAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &getSamplesServerStreamAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GetSamples_ServerStreamAllClient interface {
	Recv() (*GetSamplesReply, error)
	grpc.ClientStream
}

type getSamplesServerStreamAllClient struct {
	grpc.ClientStream
}

func (x *getSamplesServerStreamAllClient) Recv() (*GetSamplesReply, error) {
	m := new(GetSamplesReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *getSamplesClient) ServerStreamAllByName(ctx context.Context, in *KeywordRequest, opts ...grpc.CallOption) (GetSamples_ServerStreamAllByNameClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GetSamples_serviceDesc.Streams[1], c.cc, "/proto.GetSamples/ServerStreamAllByName", opts...)
	if err != nil {
		return nil, err
	}
	x := &getSamplesServerStreamAllByNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GetSamples_ServerStreamAllByNameClient interface {
	Recv() (*GetSamplesReply, error)
	grpc.ClientStream
}

type getSamplesServerStreamAllByNameClient struct {
	grpc.ClientStream
}

func (x *getSamplesServerStreamAllByNameClient) Recv() (*GetSamplesReply, error) {
	m := new(GetSamplesReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *getSamplesClient) ClientStreamAll(ctx context.Context, opts ...grpc.CallOption) (GetSamples_ClientStreamAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GetSamples_serviceDesc.Streams[2], c.cc, "/proto.GetSamples/ClientStreamAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &getSamplesClientStreamAllClient{stream}
	return x, nil
}

type GetSamples_ClientStreamAllClient interface {
	Send(*CommonRequest) error
	CloseAndRecv() (*GetSamplesReply, error)
	grpc.ClientStream
}

type getSamplesClientStreamAllClient struct {
	grpc.ClientStream
}

func (x *getSamplesClientStreamAllClient) Send(m *CommonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *getSamplesClientStreamAllClient) CloseAndRecv() (*GetSamplesReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetSamplesReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *getSamplesClient) ClientStreamAllByName(ctx context.Context, opts ...grpc.CallOption) (GetSamples_ClientStreamAllByNameClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GetSamples_serviceDesc.Streams[3], c.cc, "/proto.GetSamples/ClientStreamAllByName", opts...)
	if err != nil {
		return nil, err
	}
	x := &getSamplesClientStreamAllByNameClient{stream}
	return x, nil
}

type GetSamples_ClientStreamAllByNameClient interface {
	Send(*KeywordRequest) error
	CloseAndRecv() (*GetSamplesReply, error)
	grpc.ClientStream
}

type getSamplesClientStreamAllByNameClient struct {
	grpc.ClientStream
}

func (x *getSamplesClientStreamAllByNameClient) Send(m *KeywordRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *getSamplesClientStreamAllByNameClient) CloseAndRecv() (*GetSamplesReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetSamplesReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *getSamplesClient) StreamAll(ctx context.Context, opts ...grpc.CallOption) (GetSamples_StreamAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GetSamples_serviceDesc.Streams[4], c.cc, "/proto.GetSamples/StreamAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &getSamplesStreamAllClient{stream}
	return x, nil
}

type GetSamples_StreamAllClient interface {
	Send(*CommonRequest) error
	Recv() (*GetSamplesReply, error)
	grpc.ClientStream
}

type getSamplesStreamAllClient struct {
	grpc.ClientStream
}

func (x *getSamplesStreamAllClient) Send(m *CommonRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *getSamplesStreamAllClient) Recv() (*GetSamplesReply, error) {
	m := new(GetSamplesReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *getSamplesClient) StreamAllByName(ctx context.Context, opts ...grpc.CallOption) (GetSamples_StreamAllByNameClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GetSamples_serviceDesc.Streams[5], c.cc, "/proto.GetSamples/StreamAllByName", opts...)
	if err != nil {
		return nil, err
	}
	x := &getSamplesStreamAllByNameClient{stream}
	return x, nil
}

type GetSamples_StreamAllByNameClient interface {
	Send(*KeywordRequest) error
	Recv() (*GetSamplesReply, error)
	grpc.ClientStream
}

type getSamplesStreamAllByNameClient struct {
	grpc.ClientStream
}

func (x *getSamplesStreamAllByNameClient) Send(m *KeywordRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *getSamplesStreamAllByNameClient) Recv() (*GetSamplesReply, error) {
	m := new(GetSamplesReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GetSamples service

type GetSamplesServer interface {
	// Unary
	All(context.Context, *CommonRequest) (*GetSamplesReply, error)
	AllByName(context.Context, *KeywordRequest) (*GetSamplesReply, error)
	// Server-side stream
	ServerStreamAll(*CommonRequest, GetSamples_ServerStreamAllServer) error
	ServerStreamAllByName(*KeywordRequest, GetSamples_ServerStreamAllByNameServer) error
	// Client-side stream
	ClientStreamAll(GetSamples_ClientStreamAllServer) error
	ClientStreamAllByName(GetSamples_ClientStreamAllByNameServer) error
	// Bidirectional stream
	StreamAll(GetSamples_StreamAllServer) error
	StreamAllByName(GetSamples_StreamAllByNameServer) error
}

func RegisterGetSamplesServer(s *grpc.Server, srv GetSamplesServer) {
	s.RegisterService(&_GetSamples_serviceDesc, srv)
}

func _GetSamples_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetSamplesServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GetSamples/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetSamplesServer).All(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetSamples_AllByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetSamplesServer).AllByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GetSamples/AllByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetSamplesServer).AllByName(ctx, req.(*KeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetSamples_ServerStreamAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommonRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetSamplesServer).ServerStreamAll(m, &getSamplesServerStreamAllServer{stream})
}

type GetSamples_ServerStreamAllServer interface {
	Send(*GetSamplesReply) error
	grpc.ServerStream
}

type getSamplesServerStreamAllServer struct {
	grpc.ServerStream
}

func (x *getSamplesServerStreamAllServer) Send(m *GetSamplesReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GetSamples_ServerStreamAllByName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KeywordRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetSamplesServer).ServerStreamAllByName(m, &getSamplesServerStreamAllByNameServer{stream})
}

type GetSamples_ServerStreamAllByNameServer interface {
	Send(*GetSamplesReply) error
	grpc.ServerStream
}

type getSamplesServerStreamAllByNameServer struct {
	grpc.ServerStream
}

func (x *getSamplesServerStreamAllByNameServer) Send(m *GetSamplesReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GetSamples_ClientStreamAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GetSamplesServer).ClientStreamAll(&getSamplesClientStreamAllServer{stream})
}

type GetSamples_ClientStreamAllServer interface {
	SendAndClose(*GetSamplesReply) error
	Recv() (*CommonRequest, error)
	grpc.ServerStream
}

type getSamplesClientStreamAllServer struct {
	grpc.ServerStream
}

func (x *getSamplesClientStreamAllServer) SendAndClose(m *GetSamplesReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *getSamplesClientStreamAllServer) Recv() (*CommonRequest, error) {
	m := new(CommonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GetSamples_ClientStreamAllByName_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GetSamplesServer).ClientStreamAllByName(&getSamplesClientStreamAllByNameServer{stream})
}

type GetSamples_ClientStreamAllByNameServer interface {
	SendAndClose(*GetSamplesReply) error
	Recv() (*KeywordRequest, error)
	grpc.ServerStream
}

type getSamplesClientStreamAllByNameServer struct {
	grpc.ServerStream
}

func (x *getSamplesClientStreamAllByNameServer) SendAndClose(m *GetSamplesReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *getSamplesClientStreamAllByNameServer) Recv() (*KeywordRequest, error) {
	m := new(KeywordRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GetSamples_StreamAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GetSamplesServer).StreamAll(&getSamplesStreamAllServer{stream})
}

type GetSamples_StreamAllServer interface {
	Send(*GetSamplesReply) error
	Recv() (*CommonRequest, error)
	grpc.ServerStream
}

type getSamplesStreamAllServer struct {
	grpc.ServerStream
}

func (x *getSamplesStreamAllServer) Send(m *GetSamplesReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *getSamplesStreamAllServer) Recv() (*CommonRequest, error) {
	m := new(CommonRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GetSamples_StreamAllByName_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GetSamplesServer).StreamAllByName(&getSamplesStreamAllByNameServer{stream})
}

type GetSamples_StreamAllByNameServer interface {
	Send(*GetSamplesReply) error
	Recv() (*KeywordRequest, error)
	grpc.ServerStream
}

type getSamplesStreamAllByNameServer struct {
	grpc.ServerStream
}

func (x *getSamplesStreamAllByNameServer) Send(m *GetSamplesReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *getSamplesStreamAllByNameServer) Recv() (*KeywordRequest, error) {
	m := new(KeywordRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GetSamples_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GetSamples",
	HandlerType: (*GetSamplesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _GetSamples_All_Handler,
		},
		{
			MethodName: "AllByName",
			Handler:    _GetSamples_AllByName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamAll",
			Handler:       _GetSamples_ServerStreamAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ServerStreamAllByName",
			Handler:       _GetSamples_ServerStreamAllByName_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamAll",
			Handler:       _GetSamples_ClientStreamAll_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStreamAllByName",
			Handler:       _GetSamples_ClientStreamAllByName_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamAll",
			Handler:       _GetSamples_StreamAll_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamAllByName",
			Handler:       _GetSamples_StreamAllByName_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/main.proto",
}

func init() { proto1.RegisterFile("proto/main.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0x51, 0x4b, 0xf3, 0x30,
	0x14, 0x86, 0xbf, 0x6c, 0xfb, 0x36, 0x7a, 0xc4, 0x4d, 0x82, 0x93, 0x32, 0x26, 0x8c, 0x5e, 0xf5,
	0xaa, 0x96, 0x89, 0x78, 0x23, 0xc8, 0x56, 0x70, 0xa0, 0x28, 0xa3, 0xbb, 0xd4, 0x9b, 0x6e, 0x1e,
	0x66, 0x31, 0x69, 0x6a, 0x1a, 0x95, 0xfd, 0x25, 0xf1, 0x47, 0x4a, 0x93, 0xcd, 0xb1, 0x32, 0x45,
	0xba, 0xab, 0xe4, 0xbc, 0x3d, 0xe7, 0xe9, 0x73, 0x02, 0x07, 0xa9, 0x14, 0x4a, 0x9c, 0xf0, 0x28,
	0x4e, 0x3c, 0x7d, 0xa5, 0xff, 0xf5, 0xe1, 0x0c, 0x60, 0x3f, 0x10, 0x9c, 0x8b, 0x24, 0xc4, 0x97,
	0x57, 0xcc, 0x14, 0xa5, 0x50, 0x4b, 0x22, 0x8e, 0x36, 0xe9, 0x11, 0xd7, 0x0a, 0xf5, 0x9d, 0x76,
	0xc1, 0x52, 0x31, 0xc7, 0x4c, 0x45, 0x3c, 0xb5, 0x2b, 0xfa, 0xc3, 0x3a, 0x70, 0x1e, 0xa0, 0x79,
	0x83, 0x8b, 0x77, 0x21, 0x1f, 0x57, 0x0c, 0x1b, 0x1a, 0xcf, 0x26, 0x59, 0x62, 0x56, 0xe5, 0x37,
	0xbd, 0xf2, 0x13, 0xbd, 0x5a, 0xa4, 0x3f, 0x41, 0x6b, 0x84, 0x6a, 0x12, 0xf1, 0x94, 0x61, 0x16,
	0x62, 0xca, 0x16, 0xf4, 0x1c, 0x1a, 0x99, 0xa9, 0x6d, 0xd2, 0xab, 0xba, 0x7b, 0xfd, 0x63, 0xb3,
	0x93, 0x57, 0x68, 0xf4, 0x4c, 0x11, 0xae, 0xba, 0x3b, 0x5d, 0xa8, 0x9b, 0x68, 0xdb, 0x96, 0xfd,
	0xcf, 0x1a, 0xc0, 0x9a, 0x40, 0xcf, 0xa0, 0x3a, 0x60, 0x8c, 0x1e, 0x2e, 0xd9, 0x1b, 0xaf, 0xd4,
	0x39, 0xda, 0xfe, 0x47, 0xe7, 0x1f, 0xbd, 0x00, 0x6b, 0xc0, 0xd8, 0x70, 0x71, 0x97, 0xaf, 0xd6,
	0x5e, 0xb6, 0x6d, 0xbe, 0xcf, 0x2f, 0xd3, 0x01, 0xb4, 0x26, 0x28, 0xdf, 0x50, 0x4e, 0x94, 0xc4,
	0x88, 0x97, 0x10, 0xf0, 0x09, 0xbd, 0x86, 0x76, 0x01, 0x52, 0x52, 0xc7, 0x27, 0xb9, 0x50, 0xc0,
	0x62, 0x4c, 0x54, 0x69, 0x21, 0x57, 0x0b, 0x15, 0x20, 0x25, 0x85, 0x5c, 0x42, 0x2f, 0xc1, 0xda,
	0x41, 0xc5, 0x27, 0xf4, 0x0a, 0x5a, 0xbb, 0x6b, 0xf8, 0x64, 0x78, 0x0f, 0xce, 0x4c, 0x70, 0x6f,
	0x2e, 0xa6, 0x22, 0x66, 0x28, 0x53, 0x16, 0x29, 0xcc, 0x3c, 0x1e, 0xcf, 0xa4, 0x98, 0xcb, 0x74,
	0x66, 0x66, 0x87, 0xcd, 0xdb, 0x3c, 0x18, 0x85, 0xe3, 0x60, 0x9c, 0xd7, 0x63, 0xf2, 0x51, 0xf9,
	0xc3, 0xd8, 0xb4, 0xae, 0x8f, 0xd3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x19, 0xb6, 0x0b,
	0xb8, 0x03, 0x00, 0x00,
}
